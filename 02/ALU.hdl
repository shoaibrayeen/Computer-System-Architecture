/**
 *
 * Completed Mon Sep  2 01:07:04 CDT 2013
 *
 * The ALU. Computes one of the following functions:
 * x+y, x-y, yâ€“x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
 * Which function to compute is determined by 6 input bits
 * denoted zx, nx, zy, ny, f, no.
 * The computed function's value is called "out".
 * In addition to computing out, the ALU computes two
 * 1-bit outputs called zr and ng:
 * if out == 0, zr = 1; otherwise zr = 0;
 * If out < 0, ng = 1; otherwise ng = 0.
 * The 6-bit combinations (zx,nx,zy,ny,f,no) and
 * their effect are documented in the book.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values,
// as follows:
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1


CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if f == 1) or out = x & y (if == 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Not16(in=x, out=xinv);
    Mux4Way16(a=x, b=xinv, c=false, d=true, sel[0]=nx, sel[1]=zx, out=xpros);
    Not16(in=y, out=yinv);
    Mux4Way16(a=y, b=yinv, c=false, d=true, sel[0]=ny, sel[1]=zy, out=ypros);

    Add16(a=xpros, b=ypros, out=sumxy);
    Not16(in=sumxy, out=negsumxy);
    And16(a=xpros, b=ypros, out=andxy);
    Not16(in=andxy, out=negandxy);
    Mux4Way16(a=andxy, b=negandxy, c=sumxy, d=negsumxy, sel[1] = f, sel[0] = no, out=out, out[15]=ng, out[0..7]=btmout, out[8..15]=tpout);

    Or8Way(in=btmout, out=btmtrue);
    Or8Way(in=tpout, out=tptrue);
    Or(a=btmtrue, b=tptrue, out=zrinv);
    Not(in=zrinv, out=zr);
}
